
let pairlists_tests = [(([1;2;3],[4;5;6]),[(1,4);(2,5);(3,6)]);
                       (([],[]),[])
                      ] 
  (* Your test cases go here. *) 
    (* Q1a TODO: Implement pairlists. *)
let rec pairlists twolists =
  match twolists with
  | ([], []) -> []
  | ([], x :: xs) -> failwith "Error -- lists are not of the same length"
  | (x :: xs, []) -> failwith "Error -- lists are not of the same length"
  | (x :: xs, y :: ys) -> (x, y) :: pairlists(xs, ys)           
;;


(* Q1b TODO: Write your own tests for the w_mean function.
         You should NOT test lists of different lengths.
*)
let w_mean_tests = [ (([1.;2.;2.], [2.;3.;4.]), 3.2);
                     (([1.;1.],[2.;2.]),2.);
                     (([1.;2.],[0.;0.]),0.);
                     (([3.;1.],[-1.;-3.]),-1.5);
                     (([1.0;1.5;2.5;0.5;1.5],[10.3;11.7;2.0;5.0;6.5]),6.44285714285714217);
                     (([1.0],[2.0]),2.0);
                     (([1.],[1.]), 1.)
  (* Your test cases go here. *)
                   ]
                   
  (* Q1b TODO: Implement w_mean. *) 
let w_mean weights data = 
  
  (sumlist (List.map (fun (x,y) -> x*.y) (pairlists (weights,data)))) /.
  (sumlist (weights))

  

(* Q2 TODO: Write your own tests for the memberof function. *)
let memberof_tests = [((3, [1;3;4]), true);
                      ((4, [1;8;20;5]), false);
                      ((0, []),false)
  
                     ]
  (* Your test cases go here. *)


(* Q2 TODO: Implement memberof. *)
let rec memberof pair =
  match pair with
  | (x, []) -> false
  | (x, y :: ys) -> if x = y then true else memberof(x, ys)
;;


(*Q2 TODO: Write your own tests for the remove function. *)
let remove_tests = [((3,[1; 6; 3; 2; 6; 1; 7; 2; 3; 5]),[1;6;2;6;1;7;2;5]);
                    ((0,[]),[]);
                    ((0,[0;0]),[]);
                    ((0,[3;1;6;3;2;6;1;7;2;3;5;3]),[3;1;6;3;2;6;1;7;2;3;5;3])
                    
                    
                    
                    
                   ]
  (* Your test cases go here. *)


    (*   Q2 TODO: Implement remove. *)
let rec remove (item, lst) =
  match lst with
  | [] -> []
  | x :: xs -> if item = x then remove(item, xs) else x :: remove(item, xs)
              
;;                                                                   


(* Q3 TODO: Write your own tests for the find_max function. *)
let find_max_tests = [(([1; 6; 3; 2; 6; 1; 7; 2; 3; 5]), 7);
                      (([1; 6; 3; 2; 6; 1]), 6);
                      (([-1;-2]), -1)
                      
                      
                       
  (* Your test cases go here. *)
                     ]
                     
(* Q3 TODO: Implement find_max. *)
let find_max l = 
  let rec helper(l,m) =
    match l with
    | [] -> m
    | (x::xs) ->
        if (m < x) then helper(xs,x) else helper(xs,m) in
  match l with
  | [] -> failwith "Error -- empty list"
  | (x::xs) -> helper(xs,x)




(* Q4 TODO: Write your own tests for the selsort function. *)
let selsort_tests = [(([1; 4; 2; 5; 3; 9; 6; 8; 7]), [9; 8; 7; 6; 5; 4; 3; 2; 1]);
                     (([]), []);
                     (([-8;-6;-3]),[-3;-6;-8])
                     
                     
  (* Your test cases go here. *)
                    ]

(* Q4 TODO: Implement selsort. *)
let rec selsort l =
  match l with
  | [] -> []
  | l -> find_max l :: selsort(remove(find_max l, l))
  
  (* Question 1. *)


let common_tests = [(([1; 3; 2; 4; 1; 5; 6; 3],[3; 9; 8; 2; 11; 21; 3]),([3; 2]));
                    (([],[]),[]);
                    (([],[8]),[]); 
                    
                   ]

 
let rec common twolists = 
  match twolists with 
  | (l,[]) -> []
  | ([],l) -> []
  | (x::xs,l) -> 
      if List.mem x l then 
        x::common(xs, remove(x,l)) 
      else common(xs, l)
          

;;

(* Question 2. Mergesort requires that you use recursion.  Using List.sort or
some other sort defeats the whole purpose.  This question is for the
implementation of split.*)

let split_tests = [
  (([1; 3; 2; 4; 5; 6; 9; 11; 17; 13; 12]),([1; 2; 5; 9; 17; 12], [3; 4; 6; 11; 13]));
  ([1],([1],[]));
  ([],([],[]));
  ([-3;-7],([-3],[-7]));
  
]
  
let rec split l =
  match l with
  | [] -> ([],[])
  | [y] -> ([y],[])
  | x::y::xs -> let (p1,p2) = split xs in
      (x::p1, y::p2)
;;
(* Question 3 Here you implement merge. *)

let merge_tests = [(([1;3;5;7;9],[2; 4; 6; 8]),[1; 2; 3; 4; 5; 6; 7; 8; 9]);
                   (([],[]),[]);
                   (([-2;-4;],[]),[-2;-4]);

                  ]

let rec merge twolists =
  match twolists with
  | ([],[]) -> []
  |([],ys) -> ys
  |(xs,[]) -> xs
  |(x::xs,y::ys) -> if (x<y) then x::merge(xs,y::ys)
      else y::merge(x::xs,ys)
;;

(* Question 4 Finally you combine split and merge and use them to implement mergesort. *)

let mergesort_tests = [(([8;4;6]),([4;6;8]));
                       (([]),[]);
                       (([8]),([8])); 
                      ]

let rec mergesort l =
  match l with
  | [] -> []
  | (n::[]) -> n::[] (* Without this you will go into an infinite loop. *)
  | xs -> let (p1,p2) = split xs in  
      merge (mergesort (p1), mergesort (p2) )
;;

let mapTree_tests =
  [
    (( (fun x-> x+1), Empty), Empty); 
    
    (( (fun x-> x+1),Node( (Node(Empty, 1, Empty)) , 5 , (Node(Empty, 1, Empty)) ) ) ,  Node( (Node(Empty, 2, Empty)) , 6, (Node(Empty, 2, Empty))) );
    
    
    
  ]

let rec mapTree (f, (t: 'a tree)) =
  match t with
  |Empty -> Empty
  |Node(l, h, r) -> Node((mapTree (f, l)), (f h), (mapTree (f, r)))
;;

(* Question 2. *)


let halfint_tests =
  [
    (((fun x -> x+. 1.0), 1.0, -3.0, 0.001), -1.0);
  ]

let absFl(x:float) = if (x < 0.0) then -.x else x;;

let rec halfint((f: float -> float),(posValue:float),(negValue:float),(epsilon:float)) =
  let mid = (posValue +. negValue)/.2.0 in
  if ((absFl(f mid)) < epsilon)
  then
    mid
  else
  if (f mid) < 0.0
  then
    halfint(f,posValue,mid,epsilon)
  else
    halfint(f,mid,negValue,epsilon)
;;


(* Question 3. *)

let newton_tests =
  [
    ((sin, 5.0, 0.0001, 0.00001), 9.42477)

  ]

let rec newton ((f: float -> float),  (guess:float), (epsilon:float), (dx:float)) =
  let close((x:float), (y:float), (epsilon:float)) = absFl(x-.y) < epsilon in
  let improve((guess:float),f,(dx:float)) = guess -. (f guess)/.((deriv(f,dx)) guess) in
  if close((f guess), 0.0, epsilon)
  then
    guess
  else
    newton(f,improve(guess,f,dx),epsilon,dx)
;;
(* Question 4. *)

let indIntegral (f, (dx:float)) =
  fun( x:float) -> integral (f, 0.0, x, dx)
;;
