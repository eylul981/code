import java.io.*;
import java.util.*;

/****************************
 *
 * COMP251 template file
 *
 * Assignment 4
 *
 *****************************/

class Edge {

    public char node_1;
    public char node_2;
    
    Edge(char u, char v) {
        this.node_1 = u;
        this.node_2 = v;
    }

    @Override
    public String toString() {
        return "(" + node_1 + ", " + node_2 + ")";
    }
}

public class Graph {

    private ArrayList<Edge> edges = new ArrayList<Edge>();
    private ArrayList<Character> nodes = new ArrayList<Character>();
    private int expectedMinCutSize;

    // copy constructor
    Graph(Graph other_graph) {
        expectedMinCutSize = other_graph.expectedMinCutSize;
        edges = new ArrayList<Edge>();
        nodes = new ArrayList<Character>();
        for (int i = 0; i < other_graph.edges.size(); ++i) {
            Edge other_edge = other_graph.edges.get(i);
            char u = other_edge.node_1;
            char v = other_edge.node_2;
            Edge edge = new Edge(u, v);
            edges.add(edge);
            add_node(u);
            add_node(v);
        }
    }

    // constructor from file. called by the tester
    Graph(String file) throws RuntimeException {
        try {
            Scanner f = new Scanner(new File(file));
            expectedMinCutSize = Integer.parseInt(f.nextLine()); // First line is the size of the min cut
            while (f.hasNext()) {
                String[] line = f.nextLine().split("\\s+");
                // Make sure there is 2 elements on the line
                if (line.length != 2) {
                    continue;
                }

                char u = line[0].charAt(0);
                char v = line[1].charAt(0);
                Edge e = new Edge(u, v);
                edges.add(e);
                add_node(e.node_1);
                add_node(e.node_2);
            }
            f.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("File not found!");
            System.exit(1);
        }
    }

    // contract node u into node v
    public void contractEdge(Edge edge_to_contract) {
        char u = edge_to_contract.node_1;
        char v = edge_to_contract.node_2;

        // TODO: implement 
        for (Edge e : getEdges()) { //iterate over  Edges
            if ((e.node_1 == u) && (e.node_2 != v)) {
                e.node_1 = v; //merge the node u into v
            } else if ((e.node_2 == u) && (e.node_1 != v)){
                e.node_2 = v; //merge the node u into v
            }
        }
        removeNode(u);
        setEdges(this.edges);

    }

    public void removeNode(char toRemove) {
        nodes.remove((Character)toRemove);
    }

    public ArrayList<Edge> getEdges() {
        return edges;
    }

    public ArrayList<Character> getNodes() {
        return nodes;
    }

    public void setEdges(ArrayList<Edge> edges) {
        this.edges = edges;
    }

    public void setNodes(ArrayList<Character> nodes) {
        this.nodes = nodes;
    }

    public Edge getEdge(int edge_idx) {
        return edges.get(edge_idx);
    }

    public int getNbNodes() {
        return nodes.size();
    }

    public int getNbEdges() {
        return edges.size();
    }

    public String toString() {
        String out = Integer.toString(nodes.size());
        for (Edge e : edges) {
            out += "\n" + e.node_1 + " " + e.node_2;
        }
        return out;
    }

    public void add_node(char n) {
        if (!nodes.contains(n)) nodes.add(n);
    }

    public int getExpectedMinCutSize() {
        return expectedMinCutSize;
    }

    public void setExpectedMinCutSize(int expectedMinCutSize) {
        this.expectedMinCutSize = expectedMinCutSize;
    }
}

import java.util.*;
import java.io.*;

public class Multiply{

    private static int randomInt(int size) {
        Random rand = new Random();
        int maxval = (1 << size) - 1;
        return rand.nextInt(maxval + 1);
    }
    
    public static int[] naive(int size, int x, int y) {

    	//TODO
    		x =  x % (int)Math.pow(2, size);
    		y =  y % (int)Math.pow(2, size);
    	
    		if(size == 1) {
    			int[] result = {x*y,1};
    			return result;
    			}else {
    		
    				int newSize = (int) Math.ceil(((double)size)/2.0);

    				int a = x / (int)Math.pow(2, newSize);
    				int b = x % (int)Math.pow(2, newSize);
    				int c = y / (int)Math.pow(2, newSize);
    				int d = y % (int)Math.pow(2, newSize);
    				int[] e = naive(newSize,a,c);
    				int[] f = naive(newSize,b,d);
    				int[] g = naive(newSize,b,c);
    				int[] h = naive(newSize,a,d);
        	
    				int[] result = {(e[0] *(int)Math.pow(2, 2*newSize)) + ((g[0] + h[0]) *(int)Math.pow(2, newSize)) + f[0] ,3 + e[1] + f[1] + g[1] + h[1]};
        
    				return result;
    			}
    }

    public static int[] karatsuba(int size, int x, int y) {
    	
    		x =  x % (int)Math.pow(2, size);
    		y =  y % (int)Math.pow(2, size);
    	
    		if(size == 1) {
    		int[] result = {x*y,1};
    		return result;
      		}else {
    		
    		int newSize = (int) Math.ceil(((double)size)/2.0);

    		int a = x / (int)Math.pow(2, newSize);
        	int b = x % (int)Math.pow(2, newSize);
        	int c = y / (int)Math.pow(2, newSize);
        	int d = y % (int)Math.pow(2, newSize);

        	int[] e = karatsuba(newSize,a,c);
        	int[] f = karatsuba(newSize,b,d);
        	int[] g = karatsuba(newSize,a-b,c-d);

        	int[] result = {(e[0] *(int)Math.pow(2, 2*newSize)) + ((e[0] + f[0] - g[0]) *(int)Math.pow(2, newSize)) + f[0] ,6 + e[1] + f[1] + g[1]};
        
        	return result;

      }
    }
    
    public static void main(String[] args){

        try{
            int maxRound = 20;
            int maxIntBitSize = 16;
            for (int size=1; size<=maxIntBitSize; size++) {
                int sumOpNaive = 0;
                int sumOpKaratsuba = 0;
                for (int round=0; round<maxRound; round++) {
                    int x = randomInt(size);
                    int y = randomInt(size);
                    int[] resNaive = naive(size,x,y);
                    int[] resKaratsuba = karatsuba(size,x,y);
            
                    if (resNaive[0] != resKaratsuba[0]) {
                        throw new Exception("Return values do not match! (x=" + x + "; y=" + y + "; Naive=" + resNaive[0] + "; Karatsuba=" + resKaratsuba[0] + ")");
                    }
                    
                    if (resNaive[0] != (x*y)) {
                        int myproduct = x*y;
                        throw new Exception("Evaluation is wrong! (x=" + x + "; y=" + y + "; Your result=" + resNaive[0] + "; True value=" + myproduct + ")");
                    }
                    
                    sumOpNaive += resNaive[1];
                    sumOpKaratsuba += resKaratsuba[1];
                }
                int avgOpNaive = sumOpNaive / maxRound;
                int avgOpKaratsuba = sumOpKaratsuba / maxRound;
                System.out.println(size + "," + avgOpNaive + "," + avgOpKaratsuba);
            }
        }
        catch (Exception e){
            System.out.println(e);
        }

   } 
}
