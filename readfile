#include <stdio.h> #include <stdlib.h> #include <string.h> #include "A3_provided_functions.h"

unsigned char* bmp_open( char* bmp_filename, unsigned int *width, unsigned int *height, unsigned int *bits_per_pixel, unsigned int *padding, unsigned int *data_size, unsigned int *data_offset ){

unsigned char *img_data=NULL;

//first we need to open the file
FILE *bmpfile=fopen(bmp_filename, "rb");

//check if the file is empty
if (bmpfile==NULL){
    printf("unable to open the file %s.bmp.\n", bmp_filename);
    return img_data;
}

//use fseek to move up in the bmp file by 2
fseek(bmpfile, 2, SEEK_SET);


unsigned int overall_file_size;
fread(&overall_file_size, 1, sizeof(unsigned int), bmpfile);

rewind(bmpfile);


//create space in the memory
img_data =(unsigned char*) malloc(sizeof(char)*(overall_file_size));
if( fread( img_data, 1, overall_file_size, bmpfile) != overall_file_size){
    printf( "I was unable to read the requested %d bytes.\n", overall_file_size);
    return NULL;
}


*data_size = *(unsigned int*)(img_data+2);
*data_offset = *(unsigned int*)(img_data+10);
*width = *(unsigned int*)(img_data+18);
*height = *(unsigned int*)(img_data+22);
*bits_per_pixel = *(unsigned short int*)(img_data+28);
unsigned int padd = *width * 3;
if (padd % 4 != 0){
    padd += 4 - (padd % 4);
}
*padding = padd - (*width * 3);


fclose(bmpfile);

return img_data;
}

void bmp_close( unsigned char **img_data ) {

free(*img_data);
*img_data = NULL;
}

unsigned char*** bmp_scale( unsigned char*** pixel_array, unsigned char* header_data, unsigned int header_size, unsigned int* width, unsigned int* height, unsigned int num_colors, float scale ) { unsigned char*** new_pixel_array = NULL;

//create new width and heigth for scaling
int new_width = (*width)*scale;
int new_height = (*height)*scale;

//alocate new memory
new_pixel_array = (unsigned char***) malloc(sizeof(unsigned char**)*(*height));
if(new_pixel_array==NULL){
    printf( "failed to allocate new memory %d.\n", (*height));
    return NULL;
}

//we need space in the memory so we use malloc
for(int row =0; row < new_height; row++)
{
    new_pixel_array[row]= (unsigned char **) malloc(sizeof(unsigned char*)*(new_width));
    for (int col =0; col < new_width; col++)
        new_pixel_array[row][col]=(unsigned char*) malloc (sizeof(unsigned char)*(num_colors));
}

//populate new 3D array
for(int row=0; row<new_height; row++) {
    for( int col=0; col<new_width; col++){
        for(int color=0; color<num_colors; color++)
        {
            new_pixel_array[row][col][color] = pixel_array[(int)(row/scale)][(int)(col/scale)][color];
        }
    }
}
//now we need to assign data to new scales
*(unsigned int*) (header_data+18) = new_width;
*(unsigned int*) (header_data+22) = new_height;
unsigned int* new_size = (unsigned int*)(header_data+2);
*width=new_width;
*height=new_height;
*new_size =header_size+(*width*num_colors)*(*height);


return new_pixel_array;
}

int bmp_collage( char* background_image_filename, char* foreground_image_filename, char* output_collage_image_filename, int row_offset, int col_offset, float scale ){ //open background bmp and assign to 3D array unsigned char* background_header_data;

unsigned int background_header_size, background_width, background_height, background_num_colors;
unsigned char ***background_array = NULL;

//We have space in memory now we call the bmp 3D array to pass by reference
background_array = bmp_to_3D_array(background_image_filename, &background_header_data,
                                   &background_header_size, &background_width,
                                   &background_height, &background_num_colors);

//open foreground bmp and assign to 3D array
unsigned char* foreground_header_data;

unsigned int foreground_header_size, foreground_width, foreground_height, foreground_num_colors;

unsigned char ***foreground_array = NULL;

//We have space in memory now we call the bmp 3D array to pass by reference
foreground_array = bmp_to_3D_array(foreground_image_filename, &foreground_header_data,
                                   &foreground_header_size, &foreground_width,
                                   &foreground_height, &foreground_num_colors);

//check if the number of colors are 4
if(background_num_colors != 4 || foreground_num_colors != 4){
    printf("Ground should have 4 colors.\n");
    return -1;
}

if(background_array == NULL || foreground_array == NULL){
    printf("try with proper images\n");
    return -1;
}

//foreground must be scaled to fit into the background
unsigned char*** foreground_scaled_array = bmp_scale(foreground_array, foreground_header_data, foreground_header_size, &foreground_width, &foreground_height, foreground_num_colors, scale);
if(foreground_scaled_array == NULL){
}

//foreground image needs to be smaller than background width
if(foreground_width + col_offset > background_width){
    return -1;
}


//foreground height needs to be smaller than background height
if(foreground_height + row_offset > background_height){
    return -1;
}

for(int row=0; row<background_height; row++){
    for(int col = 0; col<background_width; col++){
        for(int color = 0; color< background_num_colors; color++){
            if(row>=row_offset && row<row_offset+foreground_height
               && col>=col_offset && col<col_offset+foreground_width
               && foreground_scaled_array[row-row_offset][col-col_offset][0] != 0){
                background_array[row][col][color] = foreground_scaled_array[row-row_offset][col-col_offset][color];
            }
        }
    }
}
bmp_from_3D_array(output_collage_image_filename, background_header_data, background_header_size, background_array, background_width, background_height, background_num_colors);

return 0;
}
